{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Admin/Desktop/Education/Education-App/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Admin/Desktop/Education/Education-App/src/app/api/spaced-repetition/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { supabase } from \"@/src/lib/supabase\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"spaced_repetition\")\r\n      .select(\"*\")\r\n      .order(\"next_review\", { ascending: true });\r\n\r\n    if (error) throw error;\r\n    return NextResponse.json(data);\r\n  } catch (error) {\r\n    console.error(\"Error fetching flashcards:\", error);\r\n    return NextResponse.json({ error: \"Failed to fetch flashcards\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const card = await request.json();\r\n\r\n    // First, create a flashcard\r\n    const { data: flashcard, error: flashcardError } = await supabase\r\n      .from(\"flashcards\")\r\n      .insert({\r\n        front: card.front,\r\n        back: card.back,\r\n        tags: []\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (flashcardError) {\r\n      console.error(\"Error creating flashcard:\", flashcardError);\r\n      throw flashcardError;\r\n    }\r\n\r\n    // Then create the spaced repetition entry using the flashcard's ID\r\n    const { data, error } = await supabase\r\n      .from(\"spaced_repetition\")\r\n      .insert({\r\n        id: flashcard.id,\r\n        front: card.front,\r\n        back: card.back,\r\n        interval: Math.floor(card.interval || 1),\r\n        ease: parseFloat((card.ease || 2.5).toString()),\r\n        next_review: card.nextReview,\r\n        reviews: 0,\r\n        correct_reviews: 0,\r\n        difficulty: card.difficulty || 'medium'\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error(\"Error creating spaced repetition entry:\", error);\r\n      throw error;\r\n    }\r\n\r\n    return NextResponse.json(data, { status: 201 });\r\n  } catch (error) {\r\n    console.error(\"Error adding flashcard:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to add flashcard\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const card = await request.json();\r\n\r\n    const { data, error } = await supabase\r\n      .from(\"spaced_repetition\")\r\n      .update({\r\n        interval: Math.floor(card.interval),\r\n        ease: parseFloat(card.ease.toString()),\r\n        next_review: card.nextReview,\r\n        reviews: card.reviews,\r\n        correct_reviews: card.correctReviews,\r\n        last_reviewed: new Date().toISOString(),\r\n        difficulty: card.difficulty\r\n      })\r\n      .eq(\"id\", card.id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return NextResponse.json(data);\r\n  } catch (error) {\r\n    console.error(\"Error updating flashcard:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to update flashcard\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { id } = await request.json();\r\n\r\n    const { error } = await supabase\r\n      .from(\"spaced_repetition\")\r\n      .delete()\r\n      .eq(\"id\", id);\r\n\r\n    if (error) throw error;\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error(\"Error deleting flashcard:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to delete flashcard\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}