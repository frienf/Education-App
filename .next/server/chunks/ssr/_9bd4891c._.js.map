{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Admin/Desktop/Education/Education-App/lib/utils/adaptiveQuizLogic.ts"],"sourcesContent":["import { QuizQuestion } from \"@/lib/types/quiz\";\r\n\r\nexport function selectNextQuestion(\r\n  questions: QuizQuestion[],\r\n  answeredQuestions: string[],\r\n  correctAnswers: number,\r\n  totalAnswered: number\r\n): QuizQuestion | null {\r\n  const unansweredQuestions = questions.filter(\r\n    (q) => !answeredQuestions.includes(q.id)\r\n  );\r\n\r\n  if (unansweredQuestions.length === 0) return null;\r\n\r\n  // Calculate accuracy to determine difficulty\r\n  const accuracy = totalAnswered > 0 ? correctAnswers / totalAnswered : 0;\r\n\r\n  let difficulty: string;\r\n  if (accuracy > 0.75) {\r\n    difficulty = \"hard\";\r\n  } else if (accuracy > 0.5) {\r\n    difficulty = \"medium\";\r\n  } else {\r\n    difficulty = \"easy\";\r\n  }\r\n\r\n  // Prefer questions of the target difficulty, fall back if none available\r\n  let nextQuestions = unansweredQuestions.filter(\r\n    (q) => q.difficulty === difficulty\r\n  );\r\n  if (nextQuestions.length === 0) {\r\n    nextQuestions = unansweredQuestions;\r\n  }\r\n\r\n  // Select a random question from the filtered pool\r\n  const randomIndex = Math.floor(Math.random() * nextQuestions.length);\r\n  return nextQuestions[randomIndex] || null;\r\n}"],"names":[],"mappings":";;;AAEO,SAAS,mBACd,SAAyB,EACzB,iBAA2B,EAC3B,cAAsB,EACtB,aAAqB;IAErB,MAAM,sBAAsB,UAAU,MAAM,CAC1C,CAAC,IAAM,CAAC,kBAAkB,QAAQ,CAAC,EAAE,EAAE;IAGzC,IAAI,oBAAoB,MAAM,KAAK,GAAG,OAAO;IAE7C,6CAA6C;IAC7C,MAAM,WAAW,gBAAgB,IAAI,iBAAiB,gBAAgB;IAEtE,IAAI;IACJ,IAAI,WAAW,MAAM;QACnB,aAAa;IACf,OAAO,IAAI,WAAW,KAAK;QACzB,aAAa;IACf,OAAO;QACL,aAAa;IACf;IAEA,yEAAyE;IACzE,IAAI,gBAAgB,oBAAoB,MAAM,CAC5C,CAAC,IAAM,EAAE,UAAU,KAAK;IAE1B,IAAI,cAAc,MAAM,KAAK,GAAG;QAC9B,gBAAgB;IAClB;IAEA,kDAAkD;IAClD,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,cAAc,MAAM;IACnE,OAAO,aAAa,CAAC,YAAY,IAAI;AACvC","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Admin/Desktop/Education/Education-App/lib/zustand/quizStore.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport { QuizQuestion } from \"@/lib/types/quiz\";\nimport { selectNextQuestion } from \"@/lib/utils/adaptiveQuizLogic\";\n\ntype QuizState = {\n  questions: QuizQuestion[];\n  currentQuestion: QuizQuestion | null;\n  answeredQuestions: string[];\n  score: number;\n  correctAnswers: number;\n  questionCounter: number;\n  fetchQuestions: () => Promise<void>;\n  selectAnswer: (answer: string) => void;\n  nextQuestion: () => void;\n  resetQuiz: () => void;\n  setCurrentQuestion: (question: QuizQuestion) => void;\n};\n\ntype RawQuestion = {\n  id: string;\n  text: string;\n  options: string[] | string;\n  correctAnswer: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n};\n\nconst validateQuestion = (question: RawQuestion): QuizQuestion | null => {\n  if (!question) return null;\n  \n  // Ensure options is an array\n  const options = Array.isArray(question.options) \n    ? question.options \n    : typeof question.options === 'string' \n      ? JSON.parse(question.options) \n      : [];\n\n  return {\n    id: question.id,\n    text: question.text || '',\n    options: options,\n    correctAnswer: question.correctAnswer || '',\n    difficulty: question.difficulty || 'medium',\n  };\n};\n\nexport const useQuizStore = create<QuizState>((set) => ({\n  questions: [],\n  currentQuestion: null,\n  answeredQuestions: [],\n  score: 0,\n  correctAnswers: 0,\n  questionCounter: 0,\n  fetchQuestions: async () => {\n    try {\n      const response = await fetch(\"/api/quiz\");\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      \n      // Validate and transform the questions\n      const validatedQuestions = data.map(validateQuestion).filter(Boolean);\n      \n      set({\n        questions: validatedQuestions,\n        currentQuestion: validatedQuestions[0] || null,\n        score: 0,\n        correctAnswers: 0,\n        answeredQuestions: [],\n        questionCounter: 0\n      });\n    } catch (error) {\n      console.error(\"Failed to fetch questions:\", error);\n      throw error;\n    }\n  },\n  selectAnswer: (answer) =>\n    set((state) => {\n      if (!state.currentQuestion) return state;\n      \n      const isCorrect = answer === state.currentQuestion.correctAnswer;\n      const newScore = isCorrect ? state.score + 1 : state.score;\n      const newCorrectAnswers = isCorrect ? state.correctAnswers + 1 : state.correctAnswers;\n      \n      // Update the questions array with the selected answer\n      const updatedQuestions = state.questions.map(q => \n        q.id === state.currentQuestion?.id \n          ? { ...q, selectedAnswer: answer }\n          : q\n      );\n\n      // Increment question counter, but don't exceed total questions\n      const newQuestionCounter = Math.min(state.questionCounter + 1, state.questions.length);\n\n      // Only get next question if we haven't reached the end\n      const nextQuestion = newQuestionCounter < state.questions.length\n        ? selectNextQuestion(\n            updatedQuestions,\n            [...state.answeredQuestions, state.currentQuestion.id],\n            newCorrectAnswers,\n            newQuestionCounter\n          )\n        : null;\n\n      return {\n        score: newScore,\n        correctAnswers: newCorrectAnswers,\n        answeredQuestions: [...state.answeredQuestions, state.currentQuestion.id],\n        questions: updatedQuestions,\n        currentQuestion: nextQuestion,\n        questionCounter: newQuestionCounter\n      };\n    }),\n  nextQuestion: () =>\n    set((state) => {\n      const nextQuestion = selectNextQuestion(\n        state.questions,\n        state.answeredQuestions,\n        state.correctAnswers,\n        state.questionCounter\n      );\n      return { currentQuestion: nextQuestion };\n    }),\n  resetQuiz: () =>\n    set({\n      currentQuestion: null,\n      answeredQuestions: [],\n      score: 0,\n      correctAnswers: 0,\n      questions: [],\n      questionCounter: 0\n    }),\n  setCurrentQuestion: (question) =>\n    set({ currentQuestion: question }),\n}));"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Admin/Desktop/Education/Education-App/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/src/lib/utils\"\r\n\r\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card\"\r\n      className={cn(\r\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-header\"\r\n      className={cn(\r\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-title\"\r\n      className={cn(\"leading-none font-semibold\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-description\"\r\n      className={cn(\"text-muted-foreground text-sm\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-action\"\r\n      className={cn(\r\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-content\"\r\n      className={cn(\"px-6\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\r\n  return (\r\n    <div\r\n      data-slot=\"card-footer\"\r\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport {\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  CardTitle,\r\n  CardAction,\r\n  CardDescription,\r\n  CardContent,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Admin/Desktop/Education/Education-App/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\r\n\r\nimport { cn } from \"@/src/lib/utils\"\r\n\r\nfunction Separator({\r\n  className,\r\n  orientation = \"horizontal\",\r\n  decorative = true,\r\n  ...props\r\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\r\n  return (\r\n    <SeparatorPrimitive.Root\r\n      data-slot=\"separator-root\"\r\n      decorative={decorative}\r\n      orientation={orientation}\r\n      className={cn(\r\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Separator }\r\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,UAAU,EACjB,SAAS,EACT,cAAc,YAAY,EAC1B,aAAa,IAAI,EACjB,GAAG,OACkD;IACrD,qBACE,8OAAC,qKAAA,CAAA,OAAuB;QACtB,aAAU;QACV,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kKACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Admin/Desktop/Education/Education-App/src/app/quiz/results/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useQuizStore } from \"@/lib/zustand/quizStore\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { motion } from \"framer-motion\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect } from \"react\";\nimport { Trophy, RefreshCw, Home, CheckCircle2, XCircle } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function QuizResultsPage() {\n  const { correctAnswers, answeredQuestions, resetQuiz, questions, questionCounter } = useQuizStore();\n  const router = useRouter();\n\n  const totalQuestions = questionCounter;\n  const percentage = totalQuestions > 0 ? Math.round((correctAnswers / totalQuestions) * 100) : 0;\n\n  // Get the questions that were answered\n  const answeredQuestionsData = questions.filter(q => answeredQuestions.includes(q.id));\n\n  useEffect(() => {\n    // If no questions were answered, redirect back to quiz\n    if (totalQuestions === 0) {\n      router.push(\"/quiz\");\n    }\n  }, [totalQuestions, router]);\n\n  const handleRetry = () => {\n    resetQuiz();\n    router.push(\"/quiz\");\n  };\n\n  const handleHome = () => {\n    router.push(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <motion.div\n        className=\"container mx-auto p-6 max-w-4xl flex-1 flex flex-col items-center justify-center\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <motion.div\n          initial={{ y: -20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"w-full max-w-2xl space-y-6\"\n        >\n          <Card className=\"bg-card/50 backdrop-blur-sm border-border/40\">\n            <CardHeader className=\"text-center\">\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ delay: 0.3, type: \"spring\" }}\n                className=\"flex justify-center mb-4\"\n              >\n                <Trophy className=\"h-16 w-16 text-yellow-500\" />\n              </motion.div>\n              <CardTitle className=\"text-3xl font-bold\">Quiz Results</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center space-y-2\">\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ delay: 0.4, type: \"spring\" }}\n                  className=\"text-6xl font-bold text-white\"\n                >\n                  {percentage}%\n                </motion.div>\n                <p className=\"text-muted-foreground\">\n                  You got {correctAnswers} out of {totalQuestions} questions correct\n                </p>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center pt-4\">\n                <Button\n                  onClick={handleRetry}\n                  className=\"bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70\"\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Try Again\n                </Button>\n                <Button\n                  onClick={handleHome}\n                  variant=\"outline\"\n                  className=\"border-primary/50 hover:bg-primary/10\"\n                >\n                  <Home className=\"h-4 w-4 mr-2\" />\n                  Back to Home\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Results */}\n          <Card className=\"bg-card/50 backdrop-blur-sm border-border/40\">\n            <CardHeader>\n              <CardTitle>Question Review</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {answeredQuestionsData.map((question, index) => {\n                const isCorrect = question.correctAnswer === question.selectedAnswer;\n                return (\n                  <motion.div\n                    key={question.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.1 * index }}\n                    className=\"space-y-2\"\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"mt-1\">\n                        {isCorrect ? (\n                          <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                        ) : (\n                          <XCircle className=\"h-5 w-5 text-red-500\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{question.text}</p>\n                        <div className=\"mt-2 space-y-1\">\n                          <p className=\"text-sm text-muted-foreground\">\n                            Your answer: <span className={isCorrect ? \"text-green-500\" : \"text-red-500\"}>\n                              {question.selectedAnswer}\n                            </span>\n                          </p>\n                          {!isCorrect && (\n                            <p className=\"text-sm text-muted-foreground\">\n                              Correct answer: <span className=\"text-green-500\">{question.correctAnswer}</span>\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    {index < answeredQuestionsData.length - 1 && (\n                      <Separator className=\"my-4\" />\n                    )}\n                  </motion.div>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}